" OS specifics
if has("win64") || has("win32")
  set ff=dos

  let g:SLASH="\\"

  set shell=powershell

  set shellcmdflag=-command
  set shellquote=\"
  set shellxquote=

  let $VIMHOME = $HOME . g:SLASH . 'vimfiles'
endif

if has("unix")
  set ff=unix

  let g:SLASH="/"

  " WSL yank support
  let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
  if executable(s:clip)
    augroup WSLYank
      autocmd!
      autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
  endif

  let $VIMHOME = $HOME . g:SLASH . '.vim'
endif

let s:after = $VIMHOME . g:SLASH . 'after' 
set runtimepath^=$VIMHOME runtimepath+=s:after 
let &packpath=&runtimepath

let g:PLUGGEDDIR = $VIMHOME . g:SLASH . 'plugged'
let g:VIMUNDODIR = $VIMHOME . g:SLASH . 'vimundo' . g:SLASH . (has('nvim') ? 'nvim' : 'vim')

if !isdirectory($VIMHOME)
    call mkdir($VIMHOME, "p")
endif

if !isdirectory(g:VIMUNDODIR)
    call mkdir(g:VIMUNDODIR, "p")
endif

call plug#begin(g:PLUGGEDDIR)

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'

Plug 'rust-lang/rust.vim'

Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/linediff.vim'

Plug 'lambdalisue/nerdfont.vim'

Plug 'jiangmiao/auto-pairs'

Plug 'aperezdc/vim-template'

Plug 'godlygeek/tabular'

Plug 'OmniSharp/omnisharp-vim'

Plug 'neoclide/coc.nvim', { 'branch': 'release' }

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'sheerun/vim-polyglot'

if has("nvim")
  Plug 'norcalli/nvim-colorizer.lua'
  Plug 'petertriho/nvim-scrollbar'
  Plug 'gpanders/editorconfig.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'sindrets/diffview.nvim'

  Plug 'nvim-lualine/lualine.nvim'
  Plug 'catppuccin/nvim', { 'as': 'catppuccin.nvim' }
  Plug 'nvim-tree/nvim-web-devicons'

  Plug 'glacambre/firenvim', { 'do': { -> firenvim#install(0) } }
else
  Plug 'RRethy/vim-hexokinase'
  Plug 'PavelSarlov/scrollbar.vim'

  Plug 'itchyny/lightline.vim'
  Plug 'catppuccin/vim', { 'as': 'catppuccin.vim' }
  Plug 'ryanoasis/vim-devicons'
endif

call plug#end()

" load configs
let g:CONFIGDIR = $VIMHOME . g:SLASH . 'config'

function! s:SourceConfig(dir)
  for path in split(glob(a:dir), "\n")
    silent exe 'source ' . path
  endfor
endfunction

call s:SourceConfig(g:CONFIGDIR . g:SLASH . (has('nvim') ? '*.lua' : '*.vim'))
